export type DirectionX = 'left' | 'right';
export type DirectionY = 'up' | 'down';
export type Direction4 = DirectionX | DirectionY;
export type Point = {
    x: number;
    y: number;
};
export type Vector = {
    x: number;
    y: number;
};
export type GridOptions = {
    x: number;
    y: number;
    marginX: number;
    marginY: number;
    breakAt: number;
    vertical?: boolean;
};
export type Rectangle = {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * Get the angle in radians between two points
 */
export declare const getAngle: (origin: Point, target: Point) => number;
/**
 * Get the distance between two points
 */
export declare const getDistance: ({ x: x1, y: y1 }: Point, { x: x2, y: y2 }: Point) => number;
type GetCell = (index: number) => Point & {
    isFinalColumn: boolean;
};
/**
 * Generate a grid
 */
export declare const grid: ({ x, y, marginX, marginY, breakAt, vertical, }: GridOptions) => GetCell;
/**
 * Create a function to place items on a line
 */
export declare const line: ({ start, margin }: {
    start: number;
    margin: number;
}) => (index: number) => number;
type GetValue = (inRange: number) => number;
/**
 * Normalize range
 */
export declare const normalizeRange: (minimum: number, maximum: number) => GetValue;
/**
 * Returns a function that takes a 0-1 range and transforms it to a value between startValue and endValue
 */
export declare function deNormalizeRange(startValue: number, endValue: number): (value: number) => number;
/**
 * Convert degrees to radians
 */
export declare const toRadians: (degrees: number) => number;
/**
 * Convert radians to degrees
 */
export declare const toDegrees: (radians: number) => number;
/**
 * Check if two rectangles are overlapping.
 */
export declare const isColliding: (rectangle1: Rectangle, rectangle2: Rectangle) => boolean;
/**
 * Check how much two rectangles are overlapping
 */
export declare const getOverlappingArea: (rectangle1: Rectangle, rectangle2: Rectangle) => number;
type Node = Record<string, any>;
/**
 * Convert a tree structure into a flat list
 * @param childrenField The field on the `node` that contains the child nodes
 */
export declare const treeToList: (node: Node, childrenField?: string) => Node[];
/**
 * Make the first letter in a string uppercase.
 *
 * Note: Doesn't handle internationalization
 */
export declare const capitalize: (string: string) => string;
export declare const getDirection: (origin: Point, target: Point) => Vector;
/**
 * Capped at 5 decimal points
 *
 * @param angle - In radians
 */
export declare const getDirectionFromAngle: (angle: number) => Vector;
export declare const getBorderingPoints: ({ x, y }: Point) => Point[];
/**
 * Get the next item in a list. Loops back to the first item after the last one.
 * @param currentItem - An item in the list
 * @param list
 */
export declare const getNextItem: <T>(currentItem: T, list: T[]) => T;
export declare const getPreviousItem: <T>(currentItem: T, list: T[]) => T;
export declare const useIndex: (maximum: number, options?: {
    loop?: boolean;
}) => (currentIndex: number, value: number) => number;
type Coordinate = {
    x: number;
    y: number;
    distanceToCenter: number;
};
export declare const create2dArrayWithDistanceToCenter: (width: number, height: number) => Coordinate[];
/**
 * Remove an item from a list by mutating the list
 *
 * @param item
 * @param list
 */
export declare const removeFromList: <T>(item: T, list: T[]) => void;
export declare const times2d: <T>(xTimes: number, yTimes: number, callback: (x: number, y: number, index: number) => T) => T[];
/**
 * Based on a point, get a surrounding rectangle with the point in the middle
 */
export declare const getSurroundingRectangle: ({ point, width, height, }: {
    point: Point;
    width: number;
    height: number;
}) => Rectangle;
/**
 * Clamp a value to a target value
 *
 * clampToTarget(63, )
 */
export declare const clampToTarget: (value: number, target: number) => number;
/**
 * Get the average of a list of numbers
 */
export declare const getAverage: (values: number[]) => number;
export declare const getNameFromFilename: (fileName: string) => string;
export declare const insertString: (string: string, toInsert: string, position: number) => string;
export declare const getRandomInt: () => number;
export declare const findDuplicates: <T extends string | number>(list: T[]) => T[];
/**
 * Convert map to a list of key value pairs
 */
export declare function mapToEntries<Key, Value>(map: Map<Key, Value>): Array<[Key, Value]>;
export {};
