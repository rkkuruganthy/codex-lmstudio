// src/utils/gherkin-generator.ts
import fs from 'fs';
import path from 'path';

export async function generateGherkinFromRepo(repoPath: string): Promise<string> {
  const files = getAllRelevantFiles(repoPath);
  const scenarios: string[] = [];

  for (const file of files) {
    const content = fs.readFileSync(file, 'utf8');
    const feature = extractFeatureFromContent(content);
    if (feature) scenarios.push(feature);
  }

  return scenarios.join('\n\n');
}

function getAllRelevantFiles(dir: string, fileList: string[] = []): string[] {
  fs.readdirSync(dir).forEach(file => {
    const fullPath = path.join(dir, file);
    if (fs.statSync(fullPath).isDirectory()) {
      getAllRelevantFiles(fullPath, fileList);
    } else if (/\.(js|ts|tsx|jsx)$/.test(fullPath)) {
      fileList.push(fullPath);
    }
  });
  return fileList;
}

function extractFeatureFromContent(code: string): string | null {
  const lines = code.split('\n').slice(0, 30).filter(Boolean);
  if (lines.length === 0) return null;

  const name = lines.find(l => /function\s+\w+|\w+\s*=\s*\(.*\)\s*=>/.test(l));
  const featureName = name ? name.trim().split(' ')[1] : 'Unknown Feature';

  return `Feature: ${featureName}\n  Scenario: Autogenerated scenario\n    Given the code is initialized\n    When the function executes\n    Then it should behave as expected`;
}
